INFO     2023-05-22 07:00:43,438 Arguments: Namespace(debug=False, verify=False, load='', config='config/cifar.json', device='cuda', log_interval=1000, seed=None, dir='model_cifar10', model='cresnet', loss_fusion=False, num_epochs=160, auto_load=False, method='fast', test_interval=1, plot=False, bound_type='IBP', natural=False, check_nan=False, w_scale_cls=100, multi_gpu=False, no_loss_fusion=False, save_all=False, model_params='', mode='cert', eval=False, complete=False, random_crop=2, num_class=10, no_data_aug=False, test_batch_size=None, batch_size=None, eps=None, min_eps=0, init_eps=None, fix_eps=False, scheduler_name='SmoothedScheduler', scheduler_opts='start=2,length=80', train_eps_mul=1.0, lr=0.0005, lr_decay_factor=0.2, lr_decay_milestones='120,140', opt='Adam', momentum=0.9, grad_norm=10.0, weight_decay=0, grad_acc_steps=1, loss='ce', ls=0.0, reg_obj=['relu', 'tightness'], reg_lambda=0.5, reg=True, vol_reg=False, colt_coeff=0, xiao_reg=False, xiao_coeff=1e-05, l1_coeff=1e-05, min_eps_reg=1e-06, tol=0.5, num_reg_epochs=81, no_reg_dec=False, manual_init=True, init_method='ibp', kaiming_init=False, no_init=False, length=None, lip=False, global_lip=False)
INFO     2023-05-22 07:00:43,439 Loading config file: config/cifar.json
INFO     2023-05-22 07:00:43,439 config: {"data": "CIFAR", "seed": 100, "training_params": {"method": "robust", "batch_size": 128}, "bound_params": {"eps": 0.03137, "bound_opts": {"relu": "adaptive", "exp": "clamp_constant"}}, "batch_size": 128}
INFO     2023-05-22 07:00:43,450 Model structure: 
 CIFARResNet(
  (features): Sequential(
    (init_block): ConvBlock(
      (conv): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activ): ReLU(inplace=True)
    )
    (stage1): Sequential(
      (unit1): ResUnit(
        (body): ResBlock(
          (conv1): ConvBlock(
            (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activ): ReLU(inplace=True)
          )
          (conv2): ConvBlock(
            (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (activ): ReLU(inplace=True)
      )
      (unit2): ResUnit(
        (body): ResBlock(
          (conv1): ConvBlock(
            (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activ): ReLU(inplace=True)
          )
          (conv2): ConvBlock(
            (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (activ): ReLU(inplace=True)
      )
      (unit3): ResUnit(
        (body): ResBlock(
          (conv1): ConvBlock(
            (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activ): ReLU(inplace=True)
          )
          (conv2): ConvBlock(
            (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (activ): ReLU(inplace=True)
      )
    )
    (stage2): Sequential(
      (unit1): ResUnit(
        (body): ResBlock(
          (conv1): ConvBlock(
            (conv): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activ): ReLU(inplace=True)
          )
          (conv2): ConvBlock(
            (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (identity_conv): ConvBlock(
          (conv): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (activ): ReLU(inplace=True)
      )
      (unit2): ResUnit(
        (body): ResBlock(
          (conv1): ConvBlock(
            (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activ): ReLU(inplace=True)
          )
          (conv2): ConvBlock(
            (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (activ): ReLU(inplace=True)
      )
      (unit3): ResUnit(
        (body): ResBlock(
          (conv1): ConvBlock(
            (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activ): ReLU(inplace=True)
          )
          (conv2): ConvBlock(
            (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (activ): ReLU(inplace=True)
      )
    )
    (stage3): Sequential(
      (unit1): ResUnit(
        (body): ResBlock(
          (conv1): ConvBlock(
            (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activ): ReLU(inplace=True)
          )
          (conv2): ConvBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (identity_conv): ConvBlock(
          (conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (activ): ReLU(inplace=True)
      )
      (unit2): ResUnit(
        (body): ResBlock(
          (conv1): ConvBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activ): ReLU(inplace=True)
          )
          (conv2): ConvBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (activ): ReLU(inplace=True)
      )
      (unit3): ResUnit(
        (body): ResBlock(
          (conv1): ConvBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activ): ReLU(inplace=True)
          )
          (conv2): ConvBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (activ): ReLU(inplace=True)
      )
    )
    (final_pool): AvgPool2d(kernel_size=8, stride=1, padding=0)
  )
  (output): Linear(in_features=64, out_features=10, bias=True)
)
INFO     2023-05-22 07:01:17,342 Parameter shapes: [torch.Size([16, 3, 3, 3]), torch.Size([16]), torch.Size([16]), torch.Size([16, 16, 3, 3]), torch.Size([16]), torch.Size([16]), torch.Size([16, 16, 3, 3]), torch.Size([16]), torch.Size([16]), torch.Size([16, 16, 3, 3]), torch.Size([16]), torch.Size([16]), torch.Size([16, 16, 3, 3]), torch.Size([16]), torch.Size([16]), torch.Size([16, 16, 3, 3]), torch.Size([16]), torch.Size([16]), torch.Size([16, 16, 3, 3]), torch.Size([16]), torch.Size([16]), torch.Size([32, 16, 3, 3]), torch.Size([32]), torch.Size([32]), torch.Size([32, 32, 3, 3]), torch.Size([32]), torch.Size([32]), torch.Size([32, 16, 1, 1]), torch.Size([32]), torch.Size([32]), torch.Size([32, 32, 3, 3]), torch.Size([32]), torch.Size([32]), torch.Size([32, 32, 3, 3]), torch.Size([32]), torch.Size([32]), torch.Size([32, 32, 3, 3]), torch.Size([32]), torch.Size([32]), torch.Size([32, 32, 3, 3]), torch.Size([32]), torch.Size([32]), torch.Size([64, 32, 3, 3]), torch.Size([64]), torch.Size([64]), torch.Size([64, 64, 3, 3]), torch.Size([64]), torch.Size([64]), torch.Size([64, 32, 1, 1]), torch.Size([64]), torch.Size([64]), torch.Size([64, 64, 3, 3]), torch.Size([64]), torch.Size([64]), torch.Size([64, 64, 3, 3]), torch.Size([64]), torch.Size([64]), torch.Size([64, 64, 3, 3]), torch.Size([64]), torch.Size([64]), torch.Size([64, 64, 3, 3]), torch.Size([64]), torch.Size([64]), torch.Size([10, 64]), torch.Size([10])]
INFO     2023-05-22 07:01:17,343 Optimizer Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    eps: 1e-08
    foreach: None
    lr: 0.0005
    maximize: False
    weight_decay: 0
)
INFO     2023-05-22 07:01:17,343 Epoch 1, learning rate [0.0005], dir model_cifar10
